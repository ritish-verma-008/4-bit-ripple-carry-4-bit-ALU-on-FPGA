module top (
    input clk,           
    input reset,
    output [3:0] q,
    output [6:0] seg,
    output [3:0] D1_AN         
);
    wire slow_clk;
    clock_divider #(25000000) div_inst (
        .clk(clk),
        .reset(reset),
        .slow_clk(slow_clk)
    );
    four_bit_RCC counter_inst (
        .clk(slow_clk),
        .reset(reset),
        .q(q)
    );
    _7_seg display_inst (
    .q(q),
    .seg(seg),
    .D1_AN(D1_AN)
    );
endmodule

module four_bit_RCC(clk,reset,q);
input clk,reset;
output [3:0] q;
TFF tff0 (clk,reset,q[0]);
TFF tff1 (q[0],reset,q[1]);
TFF tff2 (q[1],reset,q[2]);
TFF tff3 (q[2],reset,q[3]);
endmodule

module TFF (clk, reset, q);
input clk, reset;
output q;
wire d, q_int;
assign d = ~q_int;
DFF dff0 (.d(d), .clk(clk), .reset(reset), .q(q_int));
assign q = q_int;
endmodule

module DFF (d,clk,reset,q);
input d,clk,reset;
output reg q;
always@(negedge clk or posedge reset) begin
    if(reset)
        q <= 1'b0;
        else
        q <= d;
end
endmodule

module clock_divider #(parameter DIV = 25000000)(
    input clk,
    input reset,
    output reg slow_clk
);
    reg [24:0] count;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            count <= 0;
            slow_clk <= 0;
        end else if (count == DIV) begin
            count <= 0;
            slow_clk <= ~slow_clk;
        end else begin
            count <= count + 1;
        end
    end
endmodule

module _7_seg(q,seg,D1_AN);
input [3:0]q;
output reg [6:0]seg;
output reg [3:0]D1_AN;

always@(*) begin
    D1_AN=4'b1110;
    case(q)
        4'd0 : seg = 7'b1000000;
        4'd1 : seg = 7'b1111001;
        4'd2 : seg = 7'b0100100;
        4'd3 : seg = 7'b0110000;
        4'd4 : seg = 7'b0011001;
        4'd5 : seg = 7'b0010010;
        4'd6 : seg = 7'b0000010;
        4'd7 : seg = 7'b1111000;
        4'd8 : seg = 7'b0000000;
        4'd9 : seg = 7'b0010000;
        4'd10: seg = 7'b0001000;
        4'd11: seg = 7'b0000011; 
        4'd12: seg = 7'b1000110; 
        4'd13: seg = 7'b0100001; 
        4'd14: seg = 7'b0000110; 
        4'd15: seg = 7'b0001110; 
        default : seg = 7'b1111111;
endcase
end
endmodule

